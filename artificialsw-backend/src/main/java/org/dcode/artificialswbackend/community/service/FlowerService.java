package org.dcode.artificialswbackend.community.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.dcode.artificialswbackend.community.dto.AiPredictionResponseDto;
import org.dcode.artificialswbackend.community.dto.FlowerResultDto;
import org.dcode.artificialswbackend.community.entity.Flowers;
import org.dcode.artificialswbackend.community.entity.FlowerCatalog;
import org.dcode.artificialswbackend.archive.entity.IslandArchives;
import org.dcode.artificialswbackend.archive.entity.Tree;
import org.dcode.artificialswbackend.community.repository.FlowersRepository;
import org.dcode.artificialswbackend.community.repository.FlowerCatalogRepository;
import org.dcode.artificialswbackend.archive.repository.IslandArchivesRepository;
import org.dcode.artificialswbackend.archive.repository.TreeRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;

@Service
public class FlowerService {
    
    private final FlowersRepository flowersRepository;
    private final TreeRepository treeRepository;
    private final IslandArchivesRepository islandArchivesRepository;
    private final FlowerCatalogRepository flowerCatalogRepository;
    private final ObjectMapper objectMapper;
    
    public FlowerService(FlowersRepository flowersRepository, 
                        TreeRepository treeRepository,
                        IslandArchivesRepository islandArchivesRepository,
                        FlowerCatalogRepository flowerCatalogRepository) {
        this.flowersRepository = flowersRepository;
        this.treeRepository = treeRepository;
        this.islandArchivesRepository = islandArchivesRepository;
        this.flowerCatalogRepository = flowerCatalogRepository;
        this.objectMapper = new ObjectMapper();
    }
    
    public FlowerResultDto processAiResponseAndSaveFlower(String aiResponse, Long questionRefId, Long familyId) {
        try {
            // 1. AI ÏùëÎãµ ÌååÏã±
            AiPredictionResponseDto aiResult = objectMapper.readValue(aiResponse, AiPredictionResponseDto.class);
            
            // 2. ÌòÑÏû¨ ÌïúÍµ≠ ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú periodÏôÄ position Í≤∞Ï†ï
            LocalDate koreaDate = LocalDate.now(ZoneId.of("Asia/Seoul"));
            int year = koreaDate.getYear();
            int month = koreaDate.getMonthValue();
            int day = koreaDate.getDayOfMonth();
            
            // 3. ÎÇ†ÏßúÏóê Îî∞Î•∏ periodÏôÄ position Í≤∞Ï†ï
            int period;
            int position;
            
            if (day <= 15) {
                // 1-15Ïùº: period=1
                period = 1;
                if (day <= 7) {
                    position = 1; // Ï≤´ 7ÏùºÏùÄ position=1
                } else {
                    position = 2; // 8-15ÏùºÏùÄ position=2
                }
            } else {
                // 16-ÎßêÏùº: period=2
                period = 2;
                int dayInPeriod = day - 15; // 16ÏùºÎ∂ÄÌÑ∞Î•º 1ÏùºÎ°ú Í≥ÑÏÇ∞
                if (dayInPeriod <= 7) {
                    position = 1; // Ï≤´ 7Ïùº(16-22Ïùº)ÏùÄ position=1
                } else {
                    position = 2; // ÎÇòÎ®∏ÏßÄ ÎÇ†ÏùÄ position=2
                }
            }
            
            // 4. Ìï¥Îãπ Í∞ÄÏ°±Ïùò periodÏóê ÎßûÎäî ÏïÑÏπ¥Ïù¥Î∏å Ï∞æÍ∏∞ (Ïù¥ÎØ∏ ÏÉùÏÑ±ÎêòÏñ¥ ÏûàÎã§Í≥† Í∞ÄÏ†ï)
            Optional<IslandArchives> archiveOpt = islandArchivesRepository.findByFamilyIdAndYearAndMonthAndPeriod(familyId, year, month, period);
            
            if (archiveOpt.isEmpty()) {
                throw new RuntimeException("Archive not found for familyId: " + familyId + ", year: " + year + ", month: " + month + ", period: " + period);
            }
            
            IslandArchives archive = archiveOpt.get();
            
            // 5. positionÏóê ÎßûÎäî flower tree Ï∞æÍ∏∞ (Ïù¥ÎØ∏ ÏÉùÏÑ±ÎêòÏñ¥ ÏûàÎã§Í≥† Í∞ÄÏ†ï)
            Optional<Tree> treeOpt = treeRepository.findByArchiveIdAndFamilyIdAndPositionAndTreeCategory(
                archive.getId(), familyId, position, Tree.TreeCategory.flower);
            
            if (treeOpt.isEmpty()) {
                throw new RuntimeException("Tree not found for archiveId: " + archive.getId() + ", position: " + position);
            }
            
            Tree selectedTree = treeOpt.get();
            
            // 6. ÍΩÉ Ï†ïÎ≥¥ Ï†ÄÏû•
            Flowers.FlowerType flowerType = Flowers.FlowerType.fromKoreanName(aiResult.getFlower());
            Flowers flower = new Flowers(selectedTree.getId(), questionRefId, flowerType);
            flowersRepository.save(flower);
            
            // 7. Community Score Ï¶ùÍ∞Ä (ÏµúÎåÄ 10Ï†êÍπåÏßÄ)
            incrementCommunityScore(archive.getId());
            
            // 8. ÎèÑÍ∞ê unlock Ï≤òÎ¶¨
            boolean isNewlyUnlocked = checkAndUnlockFlower(familyId, flowerType);
            
            return new FlowerResultDto(aiResult.getFlower(), isNewlyUnlocked);
            
        } catch (Exception e) {
            System.err.println("Error processing AI response: " + e.getMessage());
            return null;
        }
    }
    
    private boolean checkAndUnlockFlower(Long familyId, Flowers.FlowerType flowerType) {
        // Ìï¥Îãπ Í∞ÄÏ°±Ïùò Ìï¥Îãπ ÍΩÉ ÎèÑÍ∞ê Ï°∞Ìöå
        Optional<FlowerCatalog> catalogOpt = flowerCatalogRepository.findByFamilyIdAndFlowerType(familyId, flowerType);
        
        if (catalogOpt.isEmpty()) {
            // ÎèÑÍ∞ê ÏóîÌä∏Î¶¨Í∞Ä ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±ÌïòÍ≥† unlock
            FlowerCatalog catalog = new FlowerCatalog(familyId, flowerType);
            catalog.unlock();
            flowerCatalogRepository.save(catalog);
            return true; // ÏÉàÎ°ú unlockÎê®
        } else {
            FlowerCatalog catalog = catalogOpt.get();
            if (!catalog.getUnlocked()) {
                // ÏïÑÏßÅ unlockÎêòÏßÄ ÏïäÏïòÎã§Î©¥ unlock
                catalog.unlock();
                flowerCatalogRepository.save(catalog);
                return true; // ÏÉàÎ°ú unlockÎê®
            } else {
                return false; // Ïù¥ÎØ∏ unlockÎêú ÏÉÅÌÉú
            }
        }
    }
    
    @Transactional
    private void incrementCommunityScore(Long archiveId) {
        try {
            int updatedRows = islandArchivesRepository.incrementCommunityScore(archiveId);
            if (updatedRows > 0) {
                System.out.println("üèÜ Community score increased for archive ID: " + archiveId);
            }
        } catch (Exception e) {
            System.err.println("Error incrementing community score: " + e.getMessage());
        }
    }
}